import Control.Monad 
import Control.Concurrent 
import Data.Char 
{-  
    Canale in Haskell 
    Sunt utilizate pentru comunicarea in threaduri 
    Sunt implementate, la baza, prin MVar-uri.  
    
    Tipul de date este 
        data Chan a 
    
    API pentru utilizare 
    newChan :: IO (Chan a) 
    writeChan :: Chan a -> a -> IO () -- nu este blocant 
    readChan :: Chan a -> IO a -- este blocant 
-} 

{- 
Exercitiu. Fie doua canale, wordsIn si wordsOut. 
Thread-ul principal citeste siruri pana intalneste sirul "exit" si pune aceste siruri in canalul wordsIn.
Un alt thread citeste sirurile din wordsIn, sparge sirurile in cuvinte si pune cuvintele pe canalul wordsOut.
Un alt thread citeste cuvintele din wordsOut si le afiseaza la STDOUT cu majuscule. 
-} 

pipe_words wordsIn = forever $ do 
    str <- getLine 
    if str == "exit" then return () 
    else do 
        writeChan wordsIn str 
        
move wordsIn wordsOut = do 
    str <- readChan wordsIn 
    let wordsList = words str 
    mapM_ (writeChan wordsOut) wordsList 
    
writeStdout wordsOut = do 
    word <- readChan wordsOut 
    putStrLn $ map toUpper word 

main = do 
    wordsIn <- newChan 
    wordsOut <- newChan 
    
    forkIO $ forever $ move wordsIn wordsOut 
    forkIO $ forever $ writeStdout wordsOut 
    
    pipe_words wordsIn 